# values.yaml

# -- Global settings for the release
replicaCount: 1

# -- Configuration for the Convex Backend
backend:
  image:
    repository: ghcr.io/get-convex/convex-backend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  
  # -- Reference to the Kubernetes secret containing admin keys
  secretsName: convex-secrets

  # -- Configuration for the backend's persistent storage
  persistence:
    enabled: false
    storageClassName: "longhorn-standard"
    accessMode: ReadWriteOnce
    size: 5Gi

# -- PostgreSQL database configuration
# If enabled, the backend will use an external PostgreSQL database.
# The connection URL should be stored in a Kubernetes secret.
postgres:
  # -- Set to true to use an external PostgreSQL database
  enabled: false
  # -- The name of the existing secret that contains the database URL
  # It must contain the following keys:
  #   DATABASE_URL:  The full connection string for your PostgreSQL database without the DB name specifically.
  #   INSTANCE_NAME: The name of the database instance.
  existingSecret: "convex-postgres-secret"
  


# -- Configuration for the Convex Dashboard
dashboard:
  image:
    repository: ghcr.io/get-convex/convex-dashboard
    pullPolicy: IfNotPresent
    tag: "latest"

# -- Service configurations
service:
  # -- Configuration for the main backend service
  backend:
    type: ClusterIP
    port: 3210
    actionsPort: 3211
  
  # -- Configuration for the dashboard service
  dashboard:
    type: ClusterIP
    port: 80
    targetPort: 6791

# -- Central configuration for Convex environment variables
convexConfig:
  cloudOrigin: "http://localhost:3210"
  siteOrigin: "http://localhost:3211"
  deploymentUrl: "http://localhost:3210"
  requireSsl: "true"


# -- Ingress configuration for exposing services publicly
ingress:
  # -- Enable or disable the creation of Ingress resources
  enabled: false

  # -- The Ingress Class to use. Varies by cluster setup (e.g., "nginx", "traefik")
  # Set to empty string "" if you don't want to specify an ingress class
  className: ""  # Example: "nginx", "traefik", "alb", etc.

  # -- Annotations for the Ingress controller and cert-manager
  # Customize these based on your ingress controller and certificate management setup
  # Common examples:
  #   For nginx: kubernetes.io/ingress.class: nginx
  #   For traefik: kubernetes.io/ingress.class: traefik
  #   For cert-manager: cert-manager.io/cluster-issuer: letsencrypt-prod
  #   For AWS ALB: alb.ingress.kubernetes.io/scheme: internet-facing
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

  # -- Hostname configuration for the Convex Dashboard
  # REQUIRED when ingress.enabled=true
  dashboard:
    host: ""  # Example: dashboard.example.com
    paths:
      - path: /
        pathType: Prefix

  # -- Hostname configuration for the Convex Backend API
  # REQUIRED when ingress.enabled=true
  backend:
    host: ""  # Example: api.example.com
    paths:
      - path: /
        pathType: Prefix
  
  # -- Optional: Hostname configuration for HTTP Actions (site)
  # Uncomment and configure if you need a separate domain for HTTP actions
  # site:
  #   host: ""  # Example: site.example.com
  #   paths:
  #     - path: /
  #       pathType: Prefix

  # -- TLS configuration. Cert-manager will automatically create secrets with these names.
  # Update secretName and hosts to match your domains
  tls: []
    # - secretName: convex-dashboard-tls
    #   hosts:
    #     - ""  # Must match dashboard.host
    # - secretName: convex-api-tls
    #   hosts:
    #     - ""  # Must match backend.host
    # Uncomment if using site:
    # - secretName: convex-site-tls
    #   hosts:
    #     - ""  # Must match site.host


